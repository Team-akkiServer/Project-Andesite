public class Test impl ITest {
    final var value: string;

    constructor(value: string) {
        self.value = value;
    }

    public fn getValue(): string {
        return self.value;
    }

    public override fn testFunction(): string {
        return "akki";
    }
}

public static final var test: string = "immutable";
const testConstant: string = "constant";

public interface ITest {
    fn testFunction(): string;
}

public native fn println(message: string): void;

println(new Test().testFunction());

test().test();

repeat {

} until (testFunction() == "akki");

public interface TypeParameterTest<T> {
    fn getT(): T;
}

public class TypeParameterTestImpl impl TypeParameterTest<int> {
    public override fn getT: int {
        return 0;
    }
}